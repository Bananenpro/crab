============ Crab Formal Grammar ============

program -> declaration*

declarationOrStatement -> declaration | statement
declaration -> varDecl | funcDecl
statement -> if | while | for | loopControl | return | try | block | expressionStmt 
expressionStmt -> expression ';'
block -> '{' declarationOrStatement* '}'

varDecl -> 'var' IDENTIFIER (',' IDENTIFIER)? ('=' expression)? ';'
funcDecl -> 'func' IDENTIFIER '(' parameters? ')' NUMBER 'throws'? block
parameters -> IDENTIFIER (',' IDENTIFIER)*

if -> 'if' '(' expression ')' statement
while -> 'while' '(' expression ')' statement
for -> 'for' '(' (varDecl|expressionStmt|';') expression? ';' expression? ')' statement
loopControl -> ('break'|'continue') ';'
return -> 'return' (conditional (',' conditional)*)? ';'
try -> 'try' block 'catch' ('(' IDENTIFIER ')')? block
throw -> 'throws' expression ';'

expression -> assign
assign -> IDENTIFIER (',' IDENTIFIER)? ('='|'+='|'-='|'*='|'/='|'%='|'**=') assign | conditional
conditional -> or '?' conditional ':' conditional
or -> and (('||'|'^^') and)*
and -> equality ('&&' equality)*
equality -> comparison (('=='|'!=') comparison)*
comparison -> term (('>'|'>='|'<'|'<=') comparison)*
term -> factor (('+'|'-') factor)*
factor -> power (('*'|'/'|'%') power)*
power -> unary (('**') unary)*
unary -> '-' unary | postfix
postfix -> subscript ('++'|'--') | subscript
callOrSubscript -> primary (call|subscript)*
subscript -> '[' expression ']'
call -> '(' (conditional (',' conditional)*)? ')'
anonymousFunc -> 'func' '(' parameters? ')' NUMBER 'throws'? block
primary -> NUMBER | STRING | "true" | "false" | IDENTIFIER | '(' conditional ')' | '[' (conditional (',' conditional))? ']'
